Scala Basics:
-------------

==Batch Mode Example:

-- To Code:
1. copy the below code in a file named HelloWorld.scala


object HelloWorld {
   def main(args: Array[String]) {
      println("Hello, world!")
   }
}

-- To Compile:

1. use "scalac" command to compile a scala file
2. which yeilds class files (byte code) for the scala code file
3. we can check the classes by listing the files using "ls" command

$ scalac HelloWorld.scala

-- To Execute/Run:

1. use "scala" command to execute/run a scala class file
2. which prints the output

$ scala HelloWord

==Interactive Mode Example:

-- To Code + To Compile + To Execute
1. Enter into scala shell/prompt by using "scala" keyword on the linux terminal

$ scala

2. which yeilds a scala prompt looks like "scala>"

3. simply type commands here to execute

scala> print("HelloWorld")

HelloWorld

4. semi colon is optional to terminate the command; use semicolon when you use multiple commands in one line

scala> print("HelloWorld");

HelloWorld

scala> println("HelloWorld"); print("HelloUpendra")

HelloWorld
HelloUpendra

==Scala as a calculator

1. at the heart of scala prompt it acts simply like a calculator
2. reason being, functional programming languages main view point is to help number-scientist

scala> 10 + 2
res1:Int = 12

3. by default output is stored in a variable like "res..."
4. we can use these system-generated-variables for any purpose

scala> res1 + 2
res2:Int = 14

5. system implicitly creates a suitable data type(like Int) and vairable name(res1)

-- fun stuff
Octal system => only 8 values are there => 0 1 2 3 4 5 6 7
scala calculator is in decimal, not support octal

8 => 10
9 => 11
10 => 12
15 => 17
16 => 110

045 is not equal to 45; prefix 0 tells system that it is octal

==Variable declaration and initialization

1. we can give the names to variables and assign them

scala> var i = 10

scala> i = 14

scala> i

scala> print(i)

2. final values also can be created; cannot change them like constants

scala> val j = 13

scala> j = 15 -- gives error

3. var => mutable or changeable
	val => immutable or unchangeable

==Quit

cntl + d 

-- fun fact

scala shell appears to be interpreter but it is a compiler internally


==ERRORS

-- not working
scala> var Int y = 14

